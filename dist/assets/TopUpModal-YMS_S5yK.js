var G=Object.defineProperty;var J=(s,r,e)=>r in s?G(s,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):s[r]=e;var v=(s,r,e)=>J(s,typeof r!="symbol"?r+"":r,e);import{j as o}from"./query-vendor-C7aRRP05.js";import{r as P}from"./react-vendor-mnpoGfEl.js";import{s as p,J as d,D as L,b as Q,d as K,e as X,m as F,n as $,f as j,I as Z,B as k,S as D,g as I,h as ee,i as re,k as te}from"./index-BG7cKZ7G.js";import{C as ae,d as oe}from"./card-DAgyE8vF.js";import{ResendEmailService as ne}from"./notificationService-DSlfVmh6.js";import{C as se}from"./credit-card-D8Ozh_WI.js";import{C as le}from"./circle-alert-Db-LcSto.js";import{C as ie}from"./circle-check-big-CAiBy3AQ.js";import{L as O}from"./loader-circle-CiyBGv-L.js";import{W as ce}from"./wallet-WxB2D-NK.js";const _=async s=>{try{console.log("WalletBalance: Fetching wallet balance for host:",s);const{data:r,error:e}=await p.from("host_wallets").select("id, balance, currency").eq("host_id",s).single();return e?(console.error("WalletBalance: Error fetching wallet balance:",e),e.code==="PGRST116"&&(console.log("WalletBalance: No wallet found, creating new wallet for host:",s),await C(s))?await _(s):null):(console.log("WalletBalance: Wallet balance fetched successfully:",r),r)}catch(r){return console.error("WalletBalance: Unexpected error in getWalletBalance:",r),null}},C=async s=>{try{console.log("WalletBalance: Creating wallet for host:",s);const{data:{user:r},error:e}=await p.auth.getUser();if(e||!r||r.id!==s)return console.error("WalletBalance: Authentication error or user mismatch:",e),d.error("Authentication required to create wallet"),!1;const{data:t,error:a}=await p.from("host_wallets").insert({host_id:s,balance:0,currency:"BWP"}).select().single();return a?(console.error("WalletBalance: Error creating wallet:",a),a.code==="23505"?(console.log("WalletBalance: Wallet already exists, this is normal"),!0):(d.error("Failed to create wallet. Please try again."),!1)):(console.log("WalletBalance: Wallet created successfully:",t),d.success("Wallet created successfully"),!0)}catch(r){return console.error("WalletBalance: Unexpected error in createWalletForHost:",r),d.error("An unexpected error occurred while creating wallet"),!1}},de=async(s,r)=>{try{if(console.log("WalletTopUp: Starting wallet top-up",{hostId:s,amount:r.amount,method:r.payment_method}),!s||!r.amount||r.amount<=0)return console.error("WalletTopUp: Invalid top-up parameters",{hostId:s,request:r}),d.error("Invalid top-up parameters"),!1;const{data:{user:e},error:t}=await p.auth.getUser();if(t||!e||e.id!==s)return console.error("WalletTopUp: Authentication error or user mismatch:",t),d.error("Authentication required for wallet top-up"),!1;let a=await _(s);if(!a){if(console.log("WalletTopUp: Wallet not found, creating new wallet"),!await C(s))return console.error("WalletTopUp: Failed to create wallet"),d.error("Failed to create wallet"),!1;if(a=await _(s),!a)return console.error("WalletTopUp: Failed to initialize wallet after creation"),d.error("Failed to initialize wallet"),!1}const n=a.balance+r.amount;console.log("WalletTopUp: Updating balance",{from:a.balance,to:n,difference:r.amount});const{error:c}=await p.from("host_wallets").update({balance:n,updated_at:new Date().toISOString()}).eq("id",a.id).eq("host_id",s);if(c)return console.error("WalletTopUp: Error updating wallet balance:",c),d.error("Failed to update wallet balance"),!1;const i={wallet_id:a.id,transaction_type:"top_up",amount:r.amount,balance_before:a.balance,balance_after:n,description:`Wallet top-up via ${r.payment_method.replace("_"," ")}`,payment_method:r.payment_method,payment_reference:r.payment_reference,status:"completed"},{error:u}=await p.from("wallet_transactions").insert(i);return u&&(console.error("WalletTopUp: Error recording transaction:",u),d.warning("Top-up successful but transaction logging failed")),console.log("WalletTopUp: Wallet top-up completed successfully"),d.success(`Successfully added P${r.amount.toFixed(2)} to your wallet`),!0}catch(e){return console.error("WalletTopUp: Unexpected error in topUpWallet:",e),d.error("An unexpected error occurred during top-up"),!1}},b=class b{static getInstance(){return b.instance||(b.instance=new b),b.instance}constructor(){console.log("ðŸ“± PushNotificationService initialized")}async sendPushNotification(r,e){try{const{data:t,error:a}=await p.from("push_subscriptions").select("*").eq("user_id",r);if(a)return console.error("Error fetching push subscriptions:",a),{success:!1,error:a.message};if(!t||t.length===0)return console.log("No push subscriptions found for user:",r),{success:!0,messageIds:[]};const n=[];for(const i of t)try{const{data:u,error:h}=await p.functions.invoke("send-push-notification",{body:{subscription:{endpoint:i.endpoint,keys:{p256dh:i.p256dh,auth:i.auth}},payload:{title:e.title,body:e.body,icon:e.icon||"/favicon.ico",url:e.url||"/"}}});h?(console.error("Error sending push notification:",h),n.push({success:!1,error:h.message})):(console.log("Push notification sent successfully to device"),n.push({success:!0,messageId:"push_sent"}))}catch(u){console.error("Error sending push to device:",u),n.push({success:!1,error:u instanceof Error?u.message:"Unknown error"})}const c=n.filter(i=>i.success).length;return{success:c>0,messageIds:n.filter(i=>i.success).map(i=>i.messageId||"push_sent"),error:c===0?"All push notifications failed":void 0}}catch(t){return console.error("Unhandled error in sendPushNotification:",t),{success:!1,error:t instanceof Error?t.message:"Unknown error"}}}async sendBookingNotification(r,e){let t,a,n="/bookings";switch(e.type){case"confirmed":t="Booking Confirmed",a=`Your booking for ${e.carBrand} ${e.carModel} has been confirmed!`;break;case"request":t="New Booking Request",a=`You have a new booking request for ${e.carBrand} ${e.carModel}`,n="/host-bookings";break;case"cancelled":t="Booking Cancelled",a=`Booking for ${e.carBrand} ${e.carModel} has been cancelled`;break;case"reminder":t="Pickup Reminder",a=`Don't forget to pick up ${e.carBrand} ${e.carModel} today!`;break;default:t="Booking Update",a=`Update for your ${e.carBrand} ${e.carModel} booking`}return this.sendPushNotification(r,{title:t,body:a,url:n})}async sendMessageNotification(r,e){let t="New Message",a=`${e.senderName} sent you a message`;if(e.messagePreview){const n=e.messagePreview.length>50?e.messagePreview.substring(0,50)+"...":e.messagePreview;a=`${e.senderName}: ${n}`}return this.sendPushNotification(r,{title:t,body:a,url:"/messages"})}async sendWalletNotification(r,e){let t,a;switch(e.type){case"topup":t="Wallet Top-up",a=`Your wallet has been topped up with P${e.amount.toFixed(2)}`;break;case"deduction":t="Payment Deducted",a=`P${e.amount.toFixed(2)} has been deducted from your wallet`;break;case"payment_received":t="Payment Received",a=`You received P${e.amount.toFixed(2)} in your wallet`;break;default:t="Wallet Update",a="Your wallet balance has been updated"}return this.sendPushNotification(r,{title:t,body:a,url:"/profile"})}};v(b,"instance");let S=b;const ue=S.getInstance();class pe{async createWalletNotification(r,e,t,a){try{const{error:n}=await p.rpc("create_wallet_notification",{p_host_id:r,p_type:e,p_amount:t,p_description:a});if(n){console.error("NotificationService: Error creating wallet notification:",n);return}await ue.sendWalletNotification(r,{type:e,amount:t});const{data:{user:c}}=await p.auth.getUser();(!c||c.id!==r)&&console.log("Could not get authenticated user for email notification");const i=c==null?void 0:c.email;i&&await ne.getInstance().sendEmail(i,"wallet-notification",{type:e,amount:t.toFixed(2),description:a||`Wallet ${e} of P${t.toFixed(2)}`},`Wallet ${e.charAt(0).toUpperCase()+e.slice(1)} - MobiRides`)}catch(n){console.error("NotificationService: Unexpected error creating wallet notification:",n)}}async createNotification(r,e,t,a){try{const c={wallet_topup:"wallet_topup",wallet_deduction:"wallet_deduction",wallet_created:"wallet_topup",wallet_reset:"wallet_deduction",booking_confirmed:"booking_confirmed_host",booking_cancelled:"booking_cancelled_host",booking_request:"booking_request_received",message_received:"pickup_reminder_renter",booking_reminder:"pickup_reminder_host"}[e]||"pickup_reminder_host",{error:i}=await p.from("notifications").insert({user_id:r,type:c,title:"Notification",content:t,related_booking_id:a,is_read:!1});i&&console.error("NotificationService: Error creating notification:",i.message||JSON.stringify(i,null,2))}catch(n){console.error("NotificationService: Unexpected error creating notification:",n instanceof Error?n.message:JSON.stringify(n,null,2))}}}const T=new pe;class me{async deductBookingFee(r,e,t){try{console.log("WalletOperations: Deducting booking fee",{hostId:r,bookingId:e,feeAmount:t});const a=await _(r);if(!a)return console.error("WalletOperations: Wallet not found for fee deduction"),!1;if(a.balance<t)return console.error("WalletOperations: Insufficient balance for fee deduction",{balance:a.balance,required:t}),d.error("Insufficient wallet balance for booking fee"),!1;const n=a.balance-t,{error:c}=await p.from("host_wallets").update({balance:n,updated_at:new Date().toISOString()}).eq("id",a.id);if(c)return console.error("WalletOperations: Error updating wallet balance for fee deduction:",c),!1;const{error:i}=await p.from("wallet_transactions").insert({wallet_id:a.id,booking_id:e,transaction_type:"fee_deduction",amount:-t,balance_before:a.balance,balance_after:n,description:"Booking platform fee",status:"completed"});return i?(console.error("WalletOperations: Error recording fee transaction:",i),!1):(await T.createNotification(r,"wallet_deduction",`Platform fee of P${t.toFixed(2)} deducted for booking`,e),console.log("WalletOperations: Booking fee deducted successfully"),!0)}catch(a){return console.error("WalletOperations: Unexpected error in deductBookingFee:",a),!1}}async processRentalEarnings(r,e,t){try{console.log("WalletOperations: Processing rental earnings",{hostId:r,bookingId:e,totalBookingAmount:t});const a=await _(r);if(!a)return console.error("WalletOperations: Wallet not found for earnings processing"),!1;const{error:n}=await p.from("wallet_transactions").insert({wallet_id:a.id,booking_id:e,transaction_type:"rental_earnings",amount:t,balance_before:a.balance,balance_after:a.balance,description:"Rental earnings from booking",status:"completed"});return n?(console.error("WalletOperations: Error recording earnings transaction:",n),!1):(await T.createNotification(r,"rental_earnings",`You earned P${t.toFixed(2)} from your rental`,e),console.log("WalletOperations: Rental earnings processed successfully"),!0)}catch(a){return console.error("WalletOperations: Unexpected error in processRentalEarnings:",a),!1}}async processBookingCommission(r,e,t,a){return this.processRentalEarnings(r,e,a+t)}async deductBookingCommission(r,e,t){return console.log("WalletOperations: Commission deduction handled by commission service"),!0}}const M=new me;class fe{async getTransactionHistory(r,e=20){try{console.log("TransactionHistory: Fetching transaction history for host:",r,"limit:",e);const{data:t}=await p.from("host_wallets").select("id").eq("host_id",r).single();if(!t)return console.log("TransactionHistory: No wallet found for host, returning empty transactions"),[];const{data:a,error:n}=await p.from("wallet_transactions").select("*").eq("wallet_id",t.id).order("created_at",{ascending:!1}).limit(e);return n?(console.error("TransactionHistory: Error fetching transaction history:",n),[]):(console.log("TransactionHistory: Transaction history fetched successfully:",(a==null?void 0:a.length)||0,"transactions"),a||[])}catch(t){return console.error("TransactionHistory: Unexpected error in getTransactionHistory:",t),[]}}}const ge=new fe;class he{async getWalletBalance(r){return _(r)}async topUpWallet(r,e){const t=await de(r,e);return t&&await T.createWalletNotification(r,"topup",e.amount),t}async getTransactionHistory(r,e=20){return ge.getTransactionHistory(r,e)}async deductBookingFee(r,e,t){return M.deductBookingFee(r,e,t)}async processRentalEarnings(r,e,t,a){return M.processBookingCommission(r,e,t,a)}async deductBookingCommission(r,e,t){return M.deductBookingCommission(r,e,t)}async createWalletForHost(r){const e=await C(r);return e&&await T.createNotification(r,"wallet_created","Your wallet has been created successfully"),e}}const ye=new he;class we{constructor(){v(this,"presetAmounts",[50,100,200,500,1e3]);v(this,"paymentMethods",[{id:"gcash",name:"GCash",description:"Pay with GCash mobile wallet",icon:"wallet"},{id:"maya",name:"Maya (PayMaya)",description:"Pay with Maya digital wallet",icon:"creditCard"},{id:"bank_transfer",name:"Bank Transfer",description:"Transfer from your bank account",icon:"building"},{id:"credit_card",name:"Credit Card",description:"Visa, Mastercard, American Express",icon:"creditCard"}])}getPresetAmounts(){return this.presetAmounts}getAvailablePaymentMethods(){return this.paymentMethods}async processPayment(r){if(await new Promise(t=>setTimeout(t,2e3)),Math.random()>.05)return{success:!0,payment_reference:`PAY_${Date.now()}_${Math.random().toString(36).substring(7).toUpperCase()}`};{const t=["Insufficient funds in payment method","Payment method temporarily unavailable","Transaction limit exceeded","Payment gateway timeout"];return{success:!1,error_message:t[Math.floor(Math.random()*t.length)]}}}isValidAmount(r){return r>=10&&r<=5e4}getPaymentMethodById(r){return this.paymentMethods.find(e=>e.id===r)}}const B=new we,Be=({isOpen:s,onClose:r,onSuccess:e,currentBalance:t})=>{const[a,n]=P.useState(""),[c,i]=P.useState(""),[u,h]=P.useState(!1),[W,g]=P.useState("validating"),[y,f]=P.useState(""),A=B.getPresetAmounts(),R=B.getAvailablePaymentMethods(),H=l=>{n(l.toString()),f("")},Y=l=>{switch(l){case"validating":return"Validating payment details...";case"processing_payment":return"Processing payment...";case"updating_wallet":return"Updating wallet balance...";case"completed":return"Top-up completed successfully!";case"error":return"An error occurred";default:return"Processing..."}},V=l=>!l||l<=0?"Please enter a valid amount":l<10?"Minimum top-up amount is P10.00":l>5e4?"Maximum top-up amount is P50,000.00":null,q=async()=>{const l=parseFloat(a);console.log("TopUpModal: Starting top-up process",{topUpAmount:l,paymentMethod:c,currentBalance:t}),f(""),h(!0),g("validating");try{const w=V(l);if(w){f(w),d.error(w);return}if(!c){const m="Please select a payment method";f(m),d.error(m);return}console.log("TopUpModal: Getting current user...");const{data:{user:x},error:E}=await p.auth.getUser();if(E){console.error("TopUpModal: Supabase auth error:",E);const m="Authentication error. Please log in and try again.";f(m),d.error(m);return}if(!x){console.error("TopUpModal: No user found in session");const m="No user session found. Please log in and try again.";f(m),d.error(m);return}console.log("TopUpModal: User authenticated successfully:",x.id),g("processing_payment"),console.log("TopUpModal: Processing mock payment...");const N=await B.processPayment({amount:l,payment_method:c});if(console.log("TopUpModal: Payment result:",N),!N.success){const m=N.error_message||"Payment failed";f(m),d.error(m),g("error");return}if(g("updating_wallet"),console.log("TopUpModal: Adding funds to wallet for user:",x.id),await ye.topUpWallet(x.id,{amount:l,payment_method:c,payment_reference:N.payment_reference}))g("completed"),console.log("TopUpModal: Top-up successful, calling onSuccess"),setTimeout(()=>{e(),U()},1500);else{const m="Failed to update wallet balance. Please contact support.";f(m),d.error(m),g("error")}}catch(w){console.error("TopUpModal: Unexpected error:",w);const x=w instanceof Error?w.message:"An unexpected error occurred. Please try again.";f(x),d.error(x),g("error")}finally{W!=="completed"&&h(!1)}},U=()=>{u||(r(),n(""),i(""),f(""),g("validating"))},z=t+(parseFloat(a)||0);return o.jsx(L,{open:s,onOpenChange:U,children:o.jsxs(Q,{className:"sm:max-w-md",children:[o.jsx(K,{children:o.jsxs(X,{className:"flex items-center gap-2",children:[o.jsx(se,{className:"h-5 w-5"}),"Top Up Wallet"]})}),o.jsxs("div",{className:"space-y-4",children:[o.jsx("div",{className:"p-3 bg-muted rounded-lg",children:o.jsxs("div",{className:"flex items-center justify-between",children:[o.jsxs("div",{children:[o.jsx("p",{className:"text-sm text-muted-foreground",children:"Current Balance"}),o.jsxs("p",{className:"text-lg font-semibold",children:["P",t.toFixed(2)]})]}),a&&!y&&o.jsxs("div",{className:"text-right",children:[o.jsx("p",{className:"text-sm text-muted-foreground",children:"New Balance"}),o.jsxs("p",{className:"text-lg font-semibold text-green-600",children:["P",z.toFixed(2)]})]})]})}),y&&o.jsxs(F,{variant:"destructive",children:[o.jsx(le,{className:"h-4 w-4"}),o.jsx($,{children:y})]}),u&&o.jsx(F,{children:o.jsxs("div",{className:"flex items-center gap-2",children:[W==="completed"?o.jsx(ie,{className:"h-4 w-4 text-green-500"}):o.jsx(O,{className:"h-4 w-4 animate-spin"}),o.jsx($,{children:Y(W)})]})}),o.jsxs("div",{className:"space-y-2",children:[o.jsx(j,{htmlFor:"amount",children:"Amount to Add (BWP)"}),o.jsx(Z,{id:"amount",type:"number",placeholder:"0.00",value:a,onChange:l=>{n(l.target.value),f("")},min:"10",max:"50000",step:"0.01",disabled:u,className:y&&y.includes("amount")?"border-red-500":""}),o.jsx("p",{className:"text-xs text-muted-foreground",children:"Min: P10.00 â€¢ Max: P50,000.00"})]}),o.jsxs("div",{className:"space-y-2",children:[o.jsx(j,{children:"Quick Select (BWP)"}),o.jsx("div",{className:"grid grid-cols-3 gap-2",children:A.map(l=>o.jsxs(k,{variant:a===l.toString()?"default":"outline",size:"sm",onClick:()=>H(l),className:"h-8",disabled:u,children:["P",l]},l))})]}),o.jsxs("div",{className:"space-y-2",children:[o.jsx(j,{htmlFor:"payment-method",children:"Payment Method"}),o.jsxs(D,{value:c,onValueChange:l=>{i(l),f("")},disabled:u,children:[o.jsx(I,{className:y&&y.includes("payment")?"border-red-500":"",children:o.jsx(ee,{placeholder:"Select payment method"})}),o.jsx(re,{children:R.map(l=>o.jsx(te,{value:l.id,children:l.name},l.id))})]})]}),o.jsx(ae,{className:"border-dashed border-2 border-muted",children:o.jsx(oe,{className:"p-3",children:o.jsxs("div",{className:"flex items-center gap-2",children:[o.jsx(ce,{className:"h-4 w-4 text-muted-foreground"}),o.jsx("p",{className:"text-xs text-muted-foreground",children:"ðŸ”’ This is a mock payment system for demo purposes. No real money will be charged."})]})})}),o.jsxs("div",{className:"flex gap-2",children:[o.jsx(k,{variant:"outline",onClick:U,className:"flex-1",disabled:u,children:"Cancel"}),o.jsx(k,{onClick:q,disabled:u||!a||!c||W==="completed",className:"flex-1",children:u?o.jsxs("div",{className:"flex items-center gap-2",children:[o.jsx(O,{className:"h-4 w-4 animate-spin"}),W==="completed"?"Success!":"Processing..."]}):`Top Up P${a||"0.00"}`})]})]})]})})};export{Be as T,ye as w};
