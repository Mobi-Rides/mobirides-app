var w=Object.defineProperty;var N=(n,e,i)=>e in n?w(n,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):n[e]=i;var g=(n,e,i)=>N(n,typeof e!="symbol"?e+"":e,i);import{s as l,r as E}from"./index-BAM2AQzj.js";var f=(n=>(n.PERSONAL_INFO="personal_info",n.DOCUMENT_UPLOAD="document_upload",n.SELFIE_VERIFICATION="selfie_verification",n.PHONE_VERIFICATION="phone_verification",n.ADDRESS_CONFIRMATION="address_confirmation",n.REVIEW_SUBMIT="review_submit",n.PROCESSING_STATUS="processing_status",n.COMPLETION="completion",n))(f||{}),s=(n=>(n.NOT_STARTED="not_started",n.IN_PROGRESS="in_progress",n.COMPLETED="completed",n.FAILED="failed",n.REJECTED="rejected",n.PENDING_REVIEW="pending_review",n))(s||{}),p=(n=>(n.NATIONAL_ID_FRONT="national_id_front",n.NATIONAL_ID_BACK="national_id_back",n.DRIVING_LICENSE_FRONT="driving_license_front",n.DRIVING_LICENSE_BACK="driving_license_back",n.PROOF_OF_ADDRESS="proof_of_address",n.VEHICLE_REGISTRATION="vehicle_registration",n.VEHICLE_OWNERSHIP="vehicle_ownership",n.PROOF_OF_INCOME="proof_of_income",n.SELFIE_PHOTO="selfie_photo",n))(p||{});const h=[{type:"national_id_front",required:!0,maxSizeMB:5,allowedFormats:["image/jpeg","image/png","application/pdf"],description:"Front side of Botswana National ID (Omang)",botswanaSpecific:!0},{type:"national_id_back",required:!0,maxSizeMB:5,allowedFormats:["image/jpeg","image/png","application/pdf"],description:"Back side of Botswana National ID (Omang)",botswanaSpecific:!0},{type:"driving_license_front",required:!0,maxSizeMB:5,allowedFormats:["image/jpeg","image/png","application/pdf"],description:"Front side of valid Botswana Driving License"},{type:"driving_license_back",required:!0,maxSizeMB:5,allowedFormats:["image/jpeg","image/png","application/pdf"],description:"Back side of valid Botswana Driving License"},{type:"proof_of_address",required:!0,maxSizeMB:5,allowedFormats:["image/jpeg","image/png","application/pdf"],description:"Utility bill or bank statement (max 3 months old)"},{type:"vehicle_registration",required:!1,maxSizeMB:5,allowedFormats:["image/jpeg","image/png","application/pdf"],description:"Vehicle Registration Certificate (for car owners only)"},{type:"vehicle_ownership",required:!1,maxSizeMB:5,allowedFormats:["image/jpeg","image/png","application/pdf"],description:"Proof of Vehicle Ownership (for car owners only)"},{type:"proof_of_income",required:!0,maxSizeMB:5,allowedFormats:["image/jpeg","image/png","application/pdf"],description:"Proof of Income (required for verification)"}];class S{static async initializeVerification(e,i){var r,o;try{console.log("[VerificationService] Initializing verification for user:",e);const{data:t}=await l.from("user_verifications").select("*").eq("user_id",e).single();if(t)return console.log("[VerificationService] Found existing verification data"),this.mapSupabaseToLocal(t);const{data:c,error:a}=await l.from("user_verifications").insert({user_id:e,current_step:f.PERSONAL_INFO,overall_status:s.NOT_STARTED,personal_info:{},personal_info_completed:!1,documents_completed:!1,selfie_completed:!1,phone_verified:!1,address_confirmed:!1}).select().single();if(a)throw console.error("[VerificationService] Error creating verification:",a,"Code:",a.code),(a.code==="PGRST301"||(r=a.message)!=null&&r.includes("RLS")||(o=a.message)!=null&&o.includes("policy"))&&console.warn("[VerificationService] RLS policy may be blocking insert. Check user_verifications table policies."),new Error(`Failed to initialize verification: ${a.message}`);return console.log("[VerificationService] Verification initialized successfully"),this.mapSupabaseToLocal(c)}catch(t){throw console.error("[VerificationService] Failed to initialize verification:",t),t}}static async loadVerificationData(e){try{if(!e||e==="undefined")return console.error("[VerificationService] Invalid user ID provided:",e),null;if(this.loadingCache.has(e))return console.log("[VerificationService] Using cached loading promise for user:",e),await this.loadingCache.get(e);console.log("[VerificationService] Loading verification data for user:",e);const i=this.performLoadVerificationData(e);return this.loadingCache.set(e,i),i.finally(()=>{this.loadingCache.delete(e)}),await i}catch(i){throw console.error("[VerificationService] Failed to load verification data:",i),i}}static async performLoadVerificationData(e){var i,r;try{const{data:o,error:t}=await l.from("user_verifications").select("*").eq("user_id",e).single();if(t)return t.code==="PGRST116"?(console.log("[VerificationService] No verification data found"),null):(console.error("[VerificationService] Error loading verification:"),console.error("Error message:",t.message),console.error("Error code:",t.code),console.error("Error details:",t.details),t.code==="PGRST301"||(i=t.message)!=null&&i.includes("RLS")||(r=t.message)!=null&&r.includes("policy")?(console.warn("[VerificationService] RLS policy blocking access, returning null"),null):(console.warn("[VerificationService] Returning null due to error:",t.message),null));const{data:c}=await l.from("verification_documents").select("*").eq("user_id",e);let a=null;try{const{data:_}=await l.from("phone_verifications").select("*").eq("user_id",e).single();a=_}catch{console.log("[VerificationService] Phone verifications table not available or no data found")}const{data:d}=await l.from("profiles").select("role, verification_status").eq("id",e).single(),u=this.mapSupabaseToLocal(o,c||[],a,d);return console.log("[VerificationService] Verification data loaded successfully"),u}catch(o){throw console.error("[VerificationService] Failed to load verification data:",o),o}}static async updatePersonalInfo(e,i){try{console.log("[VerificationService] Updating personal info for user:",e);const{data:r}=await l.from("user_verifications").select("personal_info").eq("user_id",e).single(),o={...(r==null?void 0:r.personal_info)||{},...i},t=this.isPersonalInfoComplete(o),{error:c}=await l.from("user_verifications").update({personal_info:o,personal_info_completed:t,current_step:t?f.DOCUMENT_UPLOAD:f.PERSONAL_INFO}).eq("user_id",e);let a=c;if(c){const{error:d}=await l.from("user_verifications").insert({user_id:e,personal_info:o,personal_info_completed:t,current_step:t?f.DOCUMENT_UPLOAD:f.PERSONAL_INFO});a=d}if(a)throw console.error("[VerificationService] Error updating personal info:",a),new Error(`Failed to update personal info: ${a.message}`);console.log("[VerificationService] Personal info updated successfully")}catch(r){throw console.error("[VerificationService] Failed to update personal info:",r),r}}static async updateDocument(e,i){try{console.log("[VerificationService] Updating document for user:",e,i.type);let r="";if(i.file){const c=i.fileName.split(".").pop(),a=`${e}/${i.type}.${c}`,{data:d,error:u}=await l.storage.from("verification-documents").upload(a,i.file,{upsert:!0});if(u)throw console.error("[VerificationService] Error uploading file:",u),new Error(`Failed to upload file: ${u.message}`);r=d.path}const o={user_id:e,document_type:i.type,file_path:r,file_name:i.fileName,file_size:i.fileSize,document_number:i.documentNumber,expiry_date:i.expiryDate,status:s.COMPLETED},{error:t}=await l.from("verification_documents").upsert(o,{onConflict:"user_id,document_type"});if(t)throw console.error("[VerificationService] Error saving document:",t),new Error(`Failed to save document: ${t.message}`);await this.updateDocumentCompletionStatus(e),console.log("[VerificationService] Document updated successfully")}catch(r){throw console.error("[VerificationService] Failed to update document:",r),r}}static async updatePhoneVerification(e,i){try{console.log("[VerificationService] Updating phone verification for user:",e,"Data:",i);const r={user_id:e,phone_number:i.phoneNumber||"",country_code:i.countryCode||"+267",verification_code:i.verificationCode||null,is_verified:i.isVerified||!1,attempt_count:i.attemptCount||0,last_attempt_at:new Date().toISOString(),verified_at:i.isVerified?new Date().toISOString():null,expires_at:new Date(Date.now()+10*60*1e3).toISOString()};console.log("[VerificationService] Phone verification data to upsert:",r);let o=!1;try{const{error:a}=await l.from("phone_verifications").upsert(r,{onConflict:"user_id"});a?console.warn("[VerificationService] Phone verifications table error:",a,"Code:",a.code):(o=!0,console.log("[VerificationService] Phone verification table updated successfully"))}catch{console.warn("[VerificationService] Phone verifications table not available, using simplified approach")}const t={};i.isVerified&&(t.phone_verified=!0,t.current_step=f.ADDRESS_CONFIRMATION);let c=null;if(Object.keys(t).length>0){const{error:a}=await l.from("user_verifications").update(t).eq("user_id",e);c=a}if(c)throw console.error("[VerificationService] Error updating main verification record:",c),new Error(`Failed to update verification status: ${c.message}`);console.log("[VerificationService] Phone verification updated successfully")}catch(r){throw console.error("[VerificationService] Failed to update phone verification:",r),r}}static async updateAddressConfirmation(e,i){try{if(console.log("[VerificationService] Updating address confirmation for user:",e),i.isConfirmed){const{error:r}=await l.from("user_verifications").update({address_confirmed:!0,current_step:f.REVIEW_SUBMIT}).eq("user_id",e);if(r)throw console.error("[VerificationService] Error updating address confirmation:",r),new Error(`Failed to update address confirmation: ${r.message}`)}console.log("[VerificationService] Address confirmation updated successfully")}catch(r){throw console.error("[VerificationService] Failed to update address confirmation:",r),r}}static async completeSelfieVerification(e){try{console.log("[VerificationService] Completing selfie verification for user:",e);const{error:i}=await l.from("user_verifications").update({selfie_completed:!0,current_step:f.PHONE_VERIFICATION}).eq("user_id",e);if(i)throw console.error("[VerificationService] Error completing selfie verification:",i),new Error(`Failed to complete selfie verification: ${i.message}`);console.log("[VerificationService] Selfie verification completed successfully")}catch(i){throw console.error("[VerificationService] Failed to complete selfie verification:",i),i}}static async submitForReview(e){try{console.log("[VerificationService] Submitting verification for review for user:",e);const{data:i,error:r}=await l.from("user_verifications").select("id, user_id").eq("user_id",e).single();if(r&&r.code!=="PGRST116")throw console.error("[VerificationService] Error checking for existing record:",r),new Error(`Failed to check verification status: ${r.message}`);if(i){console.log("[VerificationService] Updating existing verification record");const{error:t}=await l.from("user_verifications").update({current_step:f.PROCESSING_STATUS,overall_status:s.PENDING_REVIEW}).eq("user_id",e);t?(console.error("[VerificationService] Error updating verification record:",t),console.error("Message:",t.message),console.error("Code:",t.code),console.error("Details:",t.details),console.error("Hint:",t.hint),console.warn("[VerificationService] Update failed, continuing with profile update only")):console.log("[VerificationService] Verification record updated successfully")}else{console.log("[VerificationService] Creating new verification record");const{data:t,error:c}=await l.from("user_verifications").insert({user_id:e,current_step:f.PROCESSING_STATUS,overall_status:s.PENDING_REVIEW,personal_info:{},personal_info_completed:!0,documents_completed:!0,selfie_completed:!0,phone_verified:!0,address_confirmed:!0}).select();if(c)throw console.error("[VerificationService] Error creating verification record:"),console.error("Message:",c.message),console.error("Code:",c.code),console.error("Details:",c.details),console.error("Hint:",c.hint),console.error("Full error:",JSON.stringify(c,null,2)),new Error(`Failed to create verification: ${c.message}`);console.log("[VerificationService] New verification record created:",t)}const{error:o}=await l.from("profiles").update({verification_status:s.PENDING_REVIEW}).eq("id",e);if(o)throw console.error("[VerificationService] Error updating profile verification status:"),console.error("Message:",o.message),console.error("Code:",o.code),console.error("Details:",o.details),new Error(`Failed to update profile verification status: ${o.message}`);console.log("[VerificationService] Verification submitted for review successfully")}catch(i){throw console.error("[VerificationService] Failed to submit for review:",i instanceof Error?i.message:i),i}}static async completeVerification(e){try{console.log("[VerificationService] Completing verification for user:",e);const i=new Date().toISOString(),{error:r}=await l.from("user_verifications").update({current_step:f.COMPLETION,overall_status:s.COMPLETED,completed_at:i}).eq("user_id",e);if(r)throw console.error("[VerificationService] Error completing verification:",r),new Error(`Failed to complete verification: ${r.message}`);const{error:o}=await l.from("profiles").update({verification_status:s.COMPLETED,verification_completed_at:i}).eq("id",e);o&&console.error("[VerificationService] Error updating profile verification status:",o),console.log("[VerificationService] Verification completed successfully")}catch(i){throw console.error("[VerificationService] Failed to complete verification:",i),i}}static async rejectVerification(e,i){try{console.log("[VerificationService] Rejecting verification for user:",e);const{error:r}=await l.from("user_verifications").update({current_step:f.PERSONAL_INFO,overall_status:s.REJECTED,rejection_reasons:[i]}).eq("user_id",e);if(r)throw console.error("[VerificationService] Error rejecting verification:",r),new Error(`Failed to reject verification: ${r.message}`);const{error:o}=await l.from("profiles").update({verification_status:s.REJECTED,verification_rejected_reason:i}).eq("id",e);o&&console.error("[VerificationService] Error updating profile verification status:",o),console.log("[VerificationService] Verification rejected successfully")}catch(r){throw console.error("[VerificationService] Failed to reject verification:",r),r}}static async updateDocumentCompletionStatus(e){const{data:i}=await l.from("verification_documents").select("document_type").eq("user_id",e),{data:r}=await l.from("user_verifications").select("*").eq("user_id",e).single();if(!i||!r)return;[p.NATIONAL_ID_FRONT,p.NATIONAL_ID_BACK,p.DRIVING_LICENSE_FRONT,p.DRIVING_LICENSE_BACK,p.PROOF_OF_ADDRESS,p.PROOF_OF_INCOME].every(c=>i.some(a=>a.document_type===c))&&await l.from("user_verifications").update({documents_completed:!0,current_step:f.SELFIE_VERIFICATION}).eq("user_id",e)}static isPersonalInfoComplete(e){var i,r,o,t,c,a;return!!(e.fullName&&e.dateOfBirth&&e.nationalIdNumber&&e.phoneNumber&&e.email&&((i=e.address)!=null&&i.street)&&((r=e.address)!=null&&r.area)&&((o=e.address)!=null&&o.city)&&((t=e.emergencyContact)!=null&&t.name)&&((c=e.emergencyContact)!=null&&c.relationship)&&((a=e.emergencyContact)!=null&&a.phoneNumber))}static mapSupabaseToLocal(e,i=[],r,o){const t={[f.PERSONAL_INFO]:e.personal_info_completed?s.COMPLETED:s.NOT_STARTED,[f.DOCUMENT_UPLOAD]:e.documents_completed?s.COMPLETED:s.NOT_STARTED,[f.SELFIE_VERIFICATION]:e.selfie_completed?s.COMPLETED:s.NOT_STARTED,[f.PHONE_VERIFICATION]:e.phone_verified?s.COMPLETED:s.NOT_STARTED,[f.ADDRESS_CONFIRMATION]:e.address_confirmed?s.COMPLETED:s.NOT_STARTED,[f.REVIEW_SUBMIT]:e.current_step===f.PROCESSING_STATUS||e.current_step===f.COMPLETION||e.overall_status===s.PENDING_REVIEW||e.overall_status===s.COMPLETED||(o==null?void 0:o.verification_status)===s.PENDING_REVIEW||(o==null?void 0:o.verification_status)===s.COMPLETED?s.COMPLETED:s.NOT_STARTED,[f.PROCESSING_STATUS]:(o==null?void 0:o.verification_status)===s.PENDING_REVIEW||e.overall_status===s.PENDING_REVIEW?s.PENDING_REVIEW:s.NOT_STARTED,[f.COMPLETION]:(o==null?void 0:o.verification_status)===s.COMPLETED||e.overall_status===s.COMPLETED?s.COMPLETED:s.NOT_STARTED},c=i.map(u=>({type:u.document_type,file:null,fileName:u.file_name,fileSize:u.file_size,uploadedAt:u.uploaded_at,status:u.status,rejectionReason:u.rejection_reason,expiryDate:u.expiry_date,documentNumber:u.document_number})),a=r?{phoneNumber:r.phone_number,countryCode:r.country_code,verificationCode:r.verification_code||"",isVerified:r.is_verified,attemptCount:r.attempt_count,lastAttemptAt:r.last_attempt_at}:{},d=(o==null?void 0:o.role)||"renter";return{userId:e.user_id,currentStep:e.current_step,overallStatus:(o==null?void 0:o.verification_status)||e.overall_status,startedAt:e.started_at,lastUpdatedAt:e.last_updated_at,completedAt:e.completed_at,personalInfo:e.personal_info||{},documents:c,phoneVerification:a,addressConfirmation:{},stepStatuses:t,adminNotes:e.admin_notes,rejectionReasons:e.rejection_reasons,userRole:d,isHostVerificationRequired:d==="host"}}}g(S,"loadingCache",new Map);const C=()=>{const[n,e]=E.useState(!1),[i,r]=E.useState(!0),[o,t]=E.useState(null),c=async()=>{try{r(!0);const{data:{user:a}}=await l.auth.getUser();if(!a){e(!1),t(null);return}const{data:d,error:u}=await l.from("profiles").select("verification_status, verification_completed_at").eq("id",a.id).single();if(u){console.error("[VerificationStatus] Error checking profile status:",u),e(!1),t(null);return}const _=await S.loadVerificationData(a.id);if(_){const m=d==null?void 0:d.verification_status,v=m===s.COMPLETED||m==="completed"||_.overallStatus===s.COMPLETED;e(v),t(_),console.log("[VerificationStatus] User verification status:",{userId:a.id,isVerified:v,profileStatus:m,dataStatus:_.overallStatus,completedAt:d==null?void 0:d.verification_completed_at})}else{const m=(d==null?void 0:d.verification_status)===s.COMPLETED||(d==null?void 0:d.verification_status)==="completed";e(m),t(null),console.log("[VerificationStatus] No verification data found for user:",a.id,"Profile status:",d==null?void 0:d.verification_status)}}catch(a){console.error("[VerificationStatus] Failed to check verification status:",a),e(!1),t(null)}finally{r(!1)}};return E.useEffect(()=>{c();const{data:{subscription:a}}=l.auth.onAuthStateChange((d,u)=>{(d==="SIGNED_IN"||d==="SIGNED_OUT")&&c()});return()=>{a.unsubscribe()}},[]),E.useEffect(()=>{const a=()=>{c()};return window.addEventListener("storage",a),window.addEventListener("verificationCompleted",a),()=>{window.removeEventListener("storage",a),window.removeEventListener("verificationCompleted",a)}},[]),{isVerified:n,isLoading:i,verificationData:o,checkVerificationStatus:c}},T=()=>{const n=new CustomEvent("verificationCompleted");window.dispatchEvent(n)};export{h as B,p as D,S as V,s as a,f as b,T as t,C as u};
