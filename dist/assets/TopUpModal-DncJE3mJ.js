var V=Object.defineProperty;var Y=(n,e,t)=>e in n?V(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var C=(n,e,t)=>Y(n,typeof e!="symbol"?e+"":e,t);import{j as o}from"./query-vendor-C7aRRP05.js";import{r as b}from"./react-vendor-mnpoGfEl.js";import{s as c,J as i,D as G,b as K,d as Q,e as X,m as E,n as F,a1 as Z,f as j,I as q,B as U,S as I,g as ee,h as te,i as re,k as ae}from"./index-DJr5SZzu.js";import{C as oe,d as ne}from"./card-DMFn2_TK.js";import{_ as se}from"./supabase-vendor-BOn0LdFJ.js";import{C as le}from"./credit-card-Df8bEvff.js";import{C as ie}from"./circle-alert-rcKd2uBC.js";import{L as B}from"./loader-circle-B7c4mGQa.js";import{W as ce}from"./wallet-DMAM-jtb.js";const _=async n=>{try{console.log("WalletBalance: Fetching wallet balance for host:",n);const{data:e,error:t}=await c.from("host_wallets").select("id, balance, currency").eq("host_id",n).single();return t?(console.error("WalletBalance: Error fetching wallet balance:",t),t.code==="PGRST116"&&(console.log("WalletBalance: No wallet found, creating new wallet for host:",n),await k(n))?await _(n):null):(console.log("WalletBalance: Wallet balance fetched successfully:",e),e)}catch(e){return console.error("WalletBalance: Unexpected error in getWalletBalance:",e),null}},k=async n=>{try{console.log("WalletBalance: Creating wallet for host:",n);const{data:{user:e},error:t}=await c.auth.getUser();if(t||!e||e.id!==n)return console.error("WalletBalance: Authentication error or user mismatch:",t),i.error("Authentication required to create wallet"),!1;const{data:a,error:r}=await c.from("host_wallets").insert({host_id:n,balance:0,currency:"BWP"}).select().single();return r?(console.error("WalletBalance: Error creating wallet:",r),r.code==="23505"?(console.log("WalletBalance: Wallet already exists, this is normal"),!0):(i.error("Failed to create wallet. Please try again."),!1)):(console.log("WalletBalance: Wallet created successfully:",a),i.success("Wallet created successfully"),!0)}catch(e){return console.error("WalletBalance: Unexpected error in createWalletForHost:",e),i.error("An unexpected error occurred while creating wallet"),!1}},O=async(n,e)=>{try{if(console.log("WalletTopUp: Starting wallet top-up",{hostId:n,amount:e.amount,method:e.payment_method}),!n||!e.amount||e.amount<=0)return console.error("WalletTopUp: Invalid top-up parameters",{hostId:n,request:e}),i.error("Invalid top-up parameters"),!1;const{data:{user:t},error:a}=await c.auth.getUser();if(a||!t||t.id!==n)return console.error("WalletTopUp: Authentication error or user mismatch:",a),i.error("Authentication required for wallet top-up"),!1;let r=await _(n);if(!r){if(console.log("WalletTopUp: Wallet not found, creating new wallet"),!await k(n))return console.error("WalletTopUp: Failed to create wallet"),i.error("Failed to create wallet"),!1;if(r=await _(n),!r)return console.error("WalletTopUp: Failed to initialize wallet after creation"),i.error("Failed to initialize wallet"),!1}const s=r.balance+e.amount;console.log("WalletTopUp: Updating balance",{from:r.balance,to:s,difference:e.amount});const{error:d}=await c.from("host_wallets").update({balance:s,updated_at:new Date().toISOString()}).eq("id",r.id).eq("host_id",n);if(d)return console.error("WalletTopUp: Error updating wallet balance:",d),i.error("Failed to update wallet balance"),!1;const m={wallet_id:r.id,transaction_type:"top_up",amount:e.amount,balance_before:r.balance,balance_after:s,description:`Wallet top-up via ${e.payment_method.replace("_"," ")}`,payment_method:e.payment_method,payment_reference:e.payment_reference,status:"completed"},{error:f}=await c.from("wallet_transactions").insert(m);return f&&(console.error("WalletTopUp: Error recording transaction:",f),i.warning("Top-up successful but transaction logging failed")),console.log("WalletTopUp: Wallet top-up completed successfully"),i.success(`Successfully added P${e.amount.toFixed(2)} to your wallet`),!0}catch(t){return console.error("WalletTopUp: Unexpected error in topUpWallet:",t),i.error("An unexpected error occurred during top-up"),!1}},de=Object.freeze(Object.defineProperty({__proto__:null,topUpWallet:O},Symbol.toStringTag,{value:"Module"}));class ue{async createWalletNotification(e,t,a,r){try{const{error:s}=await c.rpc("create_wallet_notification",{p_host_id:e,p_type:t,p_amount:a,p_description:r});s&&console.error("NotificationService: Error creating wallet notification:",s)}catch(s){console.error("NotificationService: Unexpected error creating wallet notification:",s)}}async createNotification(e,t,a,r){try{const d={wallet_topup:"wallet_topup",wallet_deduction:"wallet_deduction",wallet_created:"wallet_topup",wallet_reset:"wallet_deduction",booking_confirmed:"booking_confirmed_host",booking_cancelled:"booking_cancelled_host",booking_request:"booking_request_received",message_received:"pickup_reminder_renter",booking_reminder:"pickup_reminder_host"}[t]||"pickup_reminder_host",{error:m}=await c.from("notifications").insert({user_id:e,type:d,title:"Notification",content:a,related_booking_id:r,is_read:!1});m&&console.error("NotificationService: Error creating notification:",m.message||JSON.stringify(m,null,2))}catch(s){console.error("NotificationService: Unexpected error creating notification:",s instanceof Error?s.message:JSON.stringify(s,null,2))}}}const v=new ue;class pe{async deductBookingFee(e,t,a){try{console.log("WalletOperations: Deducting booking fee",{hostId:e,bookingId:t,feeAmount:a});const r=await _(e);if(!r)return console.error("WalletOperations: Wallet not found for fee deduction"),!1;if(r.balance<a)return console.error("WalletOperations: Insufficient balance for fee deduction",{balance:r.balance,required:a}),i.error("Insufficient wallet balance for booking fee"),!1;const s=r.balance-a,{error:d}=await c.from("host_wallets").update({balance:s,updated_at:new Date().toISOString()}).eq("id",r.id);if(d)return console.error("WalletOperations: Error updating wallet balance for fee deduction:",d),!1;const{error:m}=await c.from("wallet_transactions").insert({wallet_id:r.id,booking_id:t,transaction_type:"fee_deduction",amount:-a,balance_before:r.balance,balance_after:s,description:"Booking platform fee",status:"completed"});return m?(console.error("WalletOperations: Error recording fee transaction:",m),!1):(await v.createNotification(e,"wallet_deduction",`Platform fee of P${a.toFixed(2)} deducted for booking`,t),console.log("WalletOperations: Booking fee deducted successfully"),!0)}catch(r){return console.error("WalletOperations: Unexpected error in deductBookingFee:",r),!1}}async processRentalEarnings(e,t,a){try{console.log("WalletOperations: Processing rental earnings",{hostId:e,bookingId:t,totalBookingAmount:a});const r=await _(e);if(!r)return console.error("WalletOperations: Wallet not found for earnings processing"),!1;const{error:s}=await c.from("wallet_transactions").insert({wallet_id:r.id,booking_id:t,transaction_type:"rental_earnings",amount:a,balance_before:r.balance,balance_after:r.balance,description:"Rental earnings from booking",status:"completed"});return s?(console.error("WalletOperations: Error recording earnings transaction:",s),!1):(await v.createNotification(e,"rental_earnings",`You earned P${a.toFixed(2)} from your rental`,t),console.log("WalletOperations: Rental earnings processed successfully"),!0)}catch(r){return console.error("WalletOperations: Unexpected error in processRentalEarnings:",r),!1}}async processBookingCommission(e,t,a,r){return this.processRentalEarnings(e,t,r+a)}async deductBookingCommission(e,t,a){return console.log("WalletOperations: Commission deduction handled by commission service"),!0}async addTestFunds(e,t){console.log("WalletOperations: Adding test funds:",{hostId:e,amount:t});const{topUpWallet:a}=await se(async()=>{const{topUpWallet:r}=await Promise.resolve().then(()=>de);return{topUpWallet:r}},void 0);return await a(e,{amount:t,payment_method:"test",payment_reference:`TEST_${Date.now()}`})}async resetWallet(e){try{console.log("WalletOperations: Resetting wallet for host:",e);const t=await _(e);if(!t)return console.log("WalletOperations: No wallet found to reset"),!1;const{error:a}=await c.from("host_wallets").update({balance:0,updated_at:new Date().toISOString()}).eq("id",t.id);return a?(console.error("WalletOperations: Error resetting wallet:",a),!1):(await v.createNotification(e,"wallet_reset","Your wallet has been reset to P0.00"),console.log("WalletOperations: Wallet reset successfully"),i.success("Wallet reset to P0.00"),!0)}catch(t){return console.error("WalletOperations: Error in resetWallet:",t),!1}}}const W=new pe;class me{async getTransactionHistory(e,t=20){try{console.log("TransactionHistory: Fetching transaction history for host:",e,"limit:",t);const{data:a}=await c.from("host_wallets").select("id").eq("host_id",e).single();if(!a)return console.log("TransactionHistory: No wallet found for host, returning empty transactions"),[];const{data:r,error:s}=await c.from("wallet_transactions").select("*").eq("wallet_id",a.id).order("created_at",{ascending:!1}).limit(t);return s?(console.error("TransactionHistory: Error fetching transaction history:",s),[]):(console.log("TransactionHistory: Transaction history fetched successfully:",(r==null?void 0:r.length)||0,"transactions"),r||[])}catch(a){return console.error("TransactionHistory: Unexpected error in getTransactionHistory:",a),[]}}}const fe=new me;class ge{async getWalletBalance(e){return _(e)}async topUpWallet(e,t){const a=await O(e,t);return a&&await v.createWalletNotification(e,"topup",t.amount),a}async getTransactionHistory(e,t=20){return fe.getTransactionHistory(e,t)}async deductBookingFee(e,t,a){return W.deductBookingFee(e,t,a)}async processRentalEarnings(e,t,a,r){return W.processBookingCommission(e,t,a,r)}async deductBookingCommission(e,t,a){return W.deductBookingCommission(e,t,a)}async createWalletForHost(e){const t=await k(e);return t&&await v.createNotification(e,"wallet_created","Your wallet has been created successfully"),t}async addTestFunds(e,t){return W.addTestFunds(e,t)}async resetWallet(e){return W.resetWallet(e)}}const A=new ge;typeof window<"u"&&(window.walletService=A,console.log("WalletService available in console for testing"));class ye{constructor(){C(this,"config",{enableFailures:!1,failureRate:.05,processingDelay:2e3,maxAmount:5e4,minAmount:10})}configure(e){this.config={...this.config,...e}}async processPayment(e){if(console.log("MockPaymentService: Starting payment processing",{amount:e.amount,method:e.payment_method,config:this.config}),await new Promise(a=>setTimeout(a,this.config.processingDelay)),e.amount<=0)return console.log("MockPaymentService: Invalid amount - must be positive"),{success:!1,error_message:"Invalid amount"};if(e.amount<this.config.minAmount)return console.log("MockPaymentService: Amount below minimum",{min:this.config.minAmount}),{success:!1,error_message:`Minimum top-up amount is P${this.config.minAmount}.00`};if(e.amount>this.config.maxAmount)return console.log("MockPaymentService: Amount exceeds maximum",{max:this.config.maxAmount}),{success:!1,error_message:`Amount exceeds maximum limit of P${this.config.maxAmount.toLocaleString()}`};if(this.config.enableFailures&&Math.random()<this.config.failureRate)return console.log("MockPaymentService: Simulated payment failure"),{success:!1,error_message:"Payment processing failed. Please try again."};const t=`MOCK_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;return console.log("MockPaymentService: Payment successful",{payment_reference:t}),{success:!0,payment_reference:t}}getAvailablePaymentMethods(){return["credit_card","debit_card","paypal","bank_transfer","mobile_money"]}getPresetAmounts(){return[50,100,200,500,1e3,2e3]}simulateSuccess(){this.configure({enableFailures:!1}),console.log("MockPaymentService: Configured for guaranteed success")}simulateFailures(e=.3){this.configure({enableFailures:!0,failureRate:e}),console.log("MockPaymentService: Configured to simulate failures at",e*100,"%")}setProcessingDelay(e){this.configure({processingDelay:e}),console.log("MockPaymentService: Set processing delay to",e,"ms")}}const S=new ye;typeof window<"u"&&(window.mockPaymentService=S,console.log("MockPaymentService available in console for testing"));const je=({isOpen:n,onClose:e,onSuccess:t,currentBalance:a})=>{const[r,s]=b.useState(""),[d,m]=b.useState(""),[f,N]=b.useState(!1),[x,y]=b.useState("validating"),[w,p]=b.useState(""),D=S.getPresetAmounts(),R=S.getAvailablePaymentMethods(),H=l=>{s(l.toString()),p("")},$=l=>{switch(l){case"validating":return"Validating payment details...";case"processing_payment":return"Processing payment...";case"updating_wallet":return"Updating wallet balance...";case"completed":return"Top-up completed successfully!";case"error":return"An error occurred";default:return"Processing..."}},L=l=>!l||l<=0?"Please enter a valid amount":l<10?"Minimum top-up amount is P10.00":l>5e4?"Maximum top-up amount is P50,000.00":null,z=async()=>{const l=parseFloat(r);console.log("TopUpModal: Starting top-up process",{topUpAmount:l,paymentMethod:d,currentBalance:a}),p(""),N(!0),y("validating");try{const g=L(l);if(g){p(g),i.error(g);return}if(!d){const u="Please select a payment method";p(u),i.error(u);return}console.log("TopUpModal: Getting current user...");const{data:{user:h},error:M}=await c.auth.getUser();if(M){console.error("TopUpModal: Supabase auth error:",M);const u="Authentication error. Please log in and try again.";p(u),i.error(u);return}if(!h){console.error("TopUpModal: No user found in session");const u="No user session found. Please log in and try again.";p(u),i.error(u);return}console.log("TopUpModal: User authenticated successfully:",h.id),y("processing_payment"),console.log("TopUpModal: Processing mock payment...");const P=await S.processPayment({amount:l,payment_method:d});if(console.log("TopUpModal: Payment result:",P),!P.success){const u=P.error_message||"Payment failed";p(u),i.error(u),y("error");return}if(y("updating_wallet"),console.log("TopUpModal: Adding funds to wallet for user:",h.id),await A.topUpWallet(h.id,{amount:l,payment_method:d,payment_reference:P.payment_reference}))y("completed"),console.log("TopUpModal: Top-up successful, calling onSuccess"),setTimeout(()=>{t(),T()},1500);else{const u="Failed to update wallet balance. Please contact support.";p(u),i.error(u),y("error")}}catch(g){console.error("TopUpModal: Unexpected error:",g);const h=g instanceof Error?g.message:"An unexpected error occurred. Please try again.";p(h),i.error(h),y("error")}finally{x!=="completed"&&N(!1)}},T=()=>{f||(e(),s(""),m(""),p(""),y("validating"))},J=a+(parseFloat(r)||0);return o.jsx(G,{open:n,onOpenChange:T,children:o.jsxs(K,{className:"sm:max-w-md",children:[o.jsx(Q,{children:o.jsxs(X,{className:"flex items-center gap-2",children:[o.jsx(le,{className:"h-5 w-5"}),"Top Up Wallet"]})}),o.jsxs("div",{className:"space-y-4",children:[o.jsx("div",{className:"p-3 bg-muted rounded-lg",children:o.jsxs("div",{className:"flex items-center justify-between",children:[o.jsxs("div",{children:[o.jsx("p",{className:"text-sm text-muted-foreground",children:"Current Balance"}),o.jsxs("p",{className:"text-lg font-semibold",children:["P",a.toFixed(2)]})]}),r&&!w&&o.jsxs("div",{className:"text-right",children:[o.jsx("p",{className:"text-sm text-muted-foreground",children:"New Balance"}),o.jsxs("p",{className:"text-lg font-semibold text-green-600",children:["P",J.toFixed(2)]})]})]})}),w&&o.jsxs(E,{variant:"destructive",children:[o.jsx(ie,{className:"h-4 w-4"}),o.jsx(F,{children:w})]}),f&&o.jsx(E,{children:o.jsxs("div",{className:"flex items-center gap-2",children:[x==="completed"?o.jsx(Z,{className:"h-4 w-4 text-green-500"}):o.jsx(B,{className:"h-4 w-4 animate-spin"}),o.jsx(F,{children:$(x)})]})}),o.jsxs("div",{className:"space-y-2",children:[o.jsx(j,{htmlFor:"amount",children:"Amount to Add (BWP)"}),o.jsx(q,{id:"amount",type:"number",placeholder:"0.00",value:r,onChange:l=>{s(l.target.value),p("")},min:"10",max:"50000",step:"0.01",disabled:f,className:w&&w.includes("amount")?"border-red-500":""}),o.jsx("p",{className:"text-xs text-muted-foreground",children:"Min: P10.00 • Max: P50,000.00"})]}),o.jsxs("div",{className:"space-y-2",children:[o.jsx(j,{children:"Quick Select (BWP)"}),o.jsx("div",{className:"grid grid-cols-3 gap-2",children:D.map(l=>o.jsxs(U,{variant:r===l.toString()?"default":"outline",size:"sm",onClick:()=>H(l),className:"h-8",disabled:f,children:["P",l]},l))})]}),o.jsxs("div",{className:"space-y-2",children:[o.jsx(j,{htmlFor:"payment-method",children:"Payment Method"}),o.jsxs(I,{value:d,onValueChange:l=>{m(l),p("")},disabled:f,children:[o.jsx(ee,{className:w&&w.includes("payment")?"border-red-500":"",children:o.jsx(te,{placeholder:"Select payment method"})}),o.jsx(re,{children:R.map(l=>o.jsx(ae,{value:l,children:l.replace(/_/g," ").replace(/\b\w/g,g=>g.toUpperCase())},l))})]})]}),o.jsx(oe,{className:"border-dashed border-2 border-muted",children:o.jsx(ne,{className:"p-3",children:o.jsxs("div",{className:"flex items-center gap-2",children:[o.jsx(ce,{className:"h-4 w-4 text-muted-foreground"}),o.jsx("p",{className:"text-xs text-muted-foreground",children:"🔒 This is a mock payment system for demo purposes. No real money will be charged."})]})})}),o.jsxs("div",{className:"flex gap-2",children:[o.jsx(U,{variant:"outline",onClick:T,className:"flex-1",disabled:f,children:"Cancel"}),o.jsx(U,{onClick:z,disabled:f||!r||!d||x==="completed",className:"flex-1",children:f?o.jsxs("div",{className:"flex items-center gap-2",children:[o.jsx(B,{className:"h-4 w-4 animate-spin"}),x==="completed"?"Success!":"Processing..."]}):`Top Up P${r||"0.00"}`})]})]})]})})};export{je as T,A as w};
