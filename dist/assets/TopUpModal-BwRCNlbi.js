var V=Object.defineProperty;var Y=(n,e,t)=>e in n?V(n,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):n[e]=t;var C=(n,e,t)=>Y(n,typeof e!="symbol"?e+"":e,t);import{s as u,J as i,aD as G,r as b,j as r,v as K,w as Q,x as X,y as Z,L as N,I as q,B as U,S as I,g as ee,k as te,l as ae,m as re}from"./index-BAM2AQzj.js";import{C as oe,d as ne}from"./card-C82ETfr4.js";import{A as F,a as B}from"./alert-7WYzCt2j.js";import{C as se}from"./credit-card-C7ZeWo_M.js";import{C as le}from"./circle-alert-CkQrh4MB.js";import{C as ie}from"./circle-check-big-CU0Wzt6B.js";import{L as E,W as ce}from"./wallet-Bu1-cXfs.js";const x=async n=>{try{console.log("WalletBalance: Fetching wallet balance for host:",n);const{data:e,error:t}=await u.from("host_wallets").select("id, balance, currency").eq("host_id",n).single();return t?(console.error("WalletBalance: Error fetching wallet balance:",t),t.code==="PGRST116"&&(console.log("WalletBalance: No wallet found, creating new wallet for host:",n),await M(n))?await x(n):null):(console.log("WalletBalance: Wallet balance fetched successfully:",e),e)}catch(e){return console.error("WalletBalance: Unexpected error in getWalletBalance:",e),null}},M=async n=>{try{console.log("WalletBalance: Creating wallet for host:",n);const{data:{user:e},error:t}=await u.auth.getUser();if(t||!e||e.id!==n)return console.error("WalletBalance: Authentication error or user mismatch:",t),i.error("Authentication required to create wallet"),!1;const{data:o,error:a}=await u.from("host_wallets").insert({host_id:n,balance:0,currency:"BWP"}).select().single();return a?(console.error("WalletBalance: Error creating wallet:",a),a.code==="23505"?(console.log("WalletBalance: Wallet already exists, this is normal"),!0):(i.error("Failed to create wallet. Please try again."),!1)):(console.log("WalletBalance: Wallet created successfully:",o),i.success("Wallet created successfully"),!0)}catch(e){return console.error("WalletBalance: Unexpected error in createWalletForHost:",e),i.error("An unexpected error occurred while creating wallet"),!1}},O=async(n,e)=>{try{if(console.log("WalletTopUp: Starting wallet top-up",{hostId:n,amount:e.amount,method:e.payment_method}),!n||!e.amount||e.amount<=0)return console.error("WalletTopUp: Invalid top-up parameters",{hostId:n,request:e}),i.error("Invalid top-up parameters"),!1;const{data:{user:t},error:o}=await u.auth.getUser();if(o||!t||t.id!==n)return console.error("WalletTopUp: Authentication error or user mismatch:",o),i.error("Authentication required for wallet top-up"),!1;let a=await x(n);if(!a){if(console.log("WalletTopUp: Wallet not found, creating new wallet"),!await M(n))return console.error("WalletTopUp: Failed to create wallet"),i.error("Failed to create wallet"),!1;if(a=await x(n),!a)return console.error("WalletTopUp: Failed to initialize wallet after creation"),i.error("Failed to initialize wallet"),!1}const l=a.balance+e.amount;console.log("WalletTopUp: Updating balance",{from:a.balance,to:l,difference:e.amount});const{error:c}=await u.from("host_wallets").update({balance:l,updated_at:new Date().toISOString()}).eq("id",a.id).eq("host_id",n);if(c)return console.error("WalletTopUp: Error updating wallet balance:",c),i.error("Failed to update wallet balance"),!1;const p={wallet_id:a.id,transaction_type:"top_up",amount:e.amount,balance_before:a.balance,balance_after:l,description:`Wallet top-up via ${e.payment_method.replace("_"," ")}`,payment_method:e.payment_method,payment_reference:e.payment_reference,status:"completed"},{error:f}=await u.from("wallet_transactions").insert(p);return f&&(console.error("WalletTopUp: Error recording transaction:",f),i.warning("Top-up successful but transaction logging failed")),console.log("WalletTopUp: Wallet top-up completed successfully"),i.success(`Successfully added P${e.amount.toFixed(2)} to your wallet`),!0}catch(t){return console.error("WalletTopUp: Unexpected error in topUpWallet:",t),i.error("An unexpected error occurred during top-up"),!1}},de=Object.freeze(Object.defineProperty({__proto__:null,topUpWallet:O},Symbol.toStringTag,{value:"Module"}));class ue{async createNotification(e,t,o,a){try{const c={wallet_topup:"booking_confirmed",wallet_deduction:"booking_cancelled",wallet_created:"booking_confirmed",wallet_reset:"booking_cancelled"}[t]||"booking_confirmed",{error:p}=await u.from("notifications").insert({user_id:e,type:c,content:o,related_booking_id:a,is_read:!1});p&&console.error("NotificationService: Error creating notification:",p.message||JSON.stringify(p,null,2))}catch(l){console.error("NotificationService: Unexpected error creating notification:",l instanceof Error?l.message:JSON.stringify(l,null,2))}}}const P=new ue;class me{async deductBookingFee(e,t,o){try{console.log("WalletOperations: Deducting booking fee",{hostId:e,bookingId:t,feeAmount:o});const a=await x(e);if(!a)return console.error("WalletOperations: Wallet not found for fee deduction"),!1;if(a.balance<o)return console.error("WalletOperations: Insufficient balance for fee deduction",{balance:a.balance,required:o}),i.error("Insufficient wallet balance for booking fee"),!1;const l=a.balance-o,{error:c}=await u.from("host_wallets").update({balance:l,updated_at:new Date().toISOString()}).eq("id",a.id);if(c)return console.error("WalletOperations: Error updating wallet balance for fee deduction:",c),!1;const{error:p}=await u.from("wallet_transactions").insert({wallet_id:a.id,booking_id:t,transaction_type:"fee_deduction",amount:-o,balance_before:a.balance,balance_after:l,description:"Booking platform fee",status:"completed"});return p?(console.error("WalletOperations: Error recording fee transaction:",p),!1):(await P.createNotification(e,"wallet_deduction",`Platform fee of P${o.toFixed(2)} deducted for booking`,t),console.log("WalletOperations: Booking fee deducted successfully"),!0)}catch(a){return console.error("WalletOperations: Unexpected error in deductBookingFee:",a),!1}}async processRentalEarnings(e,t,o){try{console.log("WalletOperations: Processing rental earnings",{hostId:e,bookingId:t,totalBookingAmount:o});const a=await x(e);if(!a)return console.error("WalletOperations: Wallet not found for earnings processing"),!1;const{error:l}=await u.from("wallet_transactions").insert({wallet_id:a.id,booking_id:t,transaction_type:"rental_earnings",amount:o,balance_before:a.balance,balance_after:a.balance,description:"Rental earnings from booking",status:"completed"});return l?(console.error("WalletOperations: Error recording earnings transaction:",l),!1):(await P.createNotification(e,"rental_earnings",`You earned P${o.toFixed(2)} from your rental`,t),console.log("WalletOperations: Rental earnings processed successfully"),!0)}catch(a){return console.error("WalletOperations: Unexpected error in processRentalEarnings:",a),!1}}async processBookingCommission(e,t,o,a){return this.processRentalEarnings(e,t,a+o)}async deductBookingCommission(e,t,o){return console.log("WalletOperations: Commission deduction handled by commission service"),!0}async addTestFunds(e,t){console.log("WalletOperations: Adding test funds:",{hostId:e,amount:t});const{topUpWallet:o}=await G(async()=>{const{topUpWallet:a}=await Promise.resolve().then(()=>de);return{topUpWallet:a}},void 0);return await o(e,{amount:t,payment_method:"test",payment_reference:`TEST_${Date.now()}`})}async resetWallet(e){try{console.log("WalletOperations: Resetting wallet for host:",e);const t=await x(e);if(!t)return console.log("WalletOperations: No wallet found to reset"),!1;const{error:o}=await u.from("host_wallets").update({balance:0,updated_at:new Date().toISOString()}).eq("id",t.id);return o?(console.error("WalletOperations: Error resetting wallet:",o),!1):(await P.createNotification(e,"wallet_reset","Your wallet has been reset to P0.00"),console.log("WalletOperations: Wallet reset successfully"),i.success("Wallet reset to P0.00"),!0)}catch(t){return console.error("WalletOperations: Error in resetWallet:",t),!1}}}const W=new me;class pe{async getTransactionHistory(e,t=20){try{console.log("TransactionHistory: Fetching transaction history for host:",e,"limit:",t);const{data:o}=await u.from("host_wallets").select("id").eq("host_id",e).single();if(!o)return console.log("TransactionHistory: No wallet found for host, returning empty transactions"),[];const{data:a,error:l}=await u.from("wallet_transactions").select("*").eq("wallet_id",o.id).order("created_at",{ascending:!1}).limit(t);return l?(console.error("TransactionHistory: Error fetching transaction history:",l),[]):(console.log("TransactionHistory: Transaction history fetched successfully:",(a==null?void 0:a.length)||0,"transactions"),a||[])}catch(o){return console.error("TransactionHistory: Unexpected error in getTransactionHistory:",o),[]}}}const fe=new pe;class ge{async getWalletBalance(e){return x(e)}async topUpWallet(e,t){const o=await O(e,t);return o&&await P.createNotification(e,"wallet_topup",`Your wallet has been topped up with P${t.amount.toFixed(2)}`),o}async getTransactionHistory(e,t=20){return fe.getTransactionHistory(e,t)}async deductBookingFee(e,t,o){return W.deductBookingFee(e,t,o)}async processRentalEarnings(e,t,o,a){return W.processBookingCommission(e,t,o,a)}async deductBookingCommission(e,t,o){return W.deductBookingCommission(e,t,o)}async createWalletForHost(e){const t=await M(e);return t&&await P.createNotification(e,"wallet_created","Your wallet has been created successfully"),t}async addTestFunds(e,t){return W.addTestFunds(e,t)}async resetWallet(e){return W.resetWallet(e)}}const A=new ge;typeof window<"u"&&(window.walletService=A,console.log("WalletService available in console for testing"));class ye{constructor(){C(this,"config",{enableFailures:!1,failureRate:.05,processingDelay:2e3,maxAmount:5e4,minAmount:10})}configure(e){this.config={...this.config,...e}}async processPayment(e){if(console.log("MockPaymentService: Starting payment processing",{amount:e.amount,method:e.payment_method,config:this.config}),await new Promise(o=>setTimeout(o,this.config.processingDelay)),e.amount<=0)return console.log("MockPaymentService: Invalid amount - must be positive"),{success:!1,error_message:"Invalid amount"};if(e.amount<this.config.minAmount)return console.log("MockPaymentService: Amount below minimum",{min:this.config.minAmount}),{success:!1,error_message:`Minimum top-up amount is P${this.config.minAmount}.00`};if(e.amount>this.config.maxAmount)return console.log("MockPaymentService: Amount exceeds maximum",{max:this.config.maxAmount}),{success:!1,error_message:`Amount exceeds maximum limit of P${this.config.maxAmount.toLocaleString()}`};if(this.config.enableFailures&&Math.random()<this.config.failureRate)return console.log("MockPaymentService: Simulated payment failure"),{success:!1,error_message:"Payment processing failed. Please try again."};const t=`MOCK_${Date.now()}_${Math.random().toString(36).substr(2,9)}`;return console.log("MockPaymentService: Payment successful",{payment_reference:t}),{success:!0,payment_reference:t}}getAvailablePaymentMethods(){return["credit_card","debit_card","paypal","bank_transfer","mobile_money"]}getPresetAmounts(){return[50,100,200,500,1e3,2e3]}simulateSuccess(){this.configure({enableFailures:!1}),console.log("MockPaymentService: Configured for guaranteed success")}simulateFailures(e=.3){this.configure({enableFailures:!0,failureRate:e}),console.log("MockPaymentService: Configured to simulate failures at",e*100,"%")}setProcessingDelay(e){this.configure({processingDelay:e}),console.log("MockPaymentService: Set processing delay to",e,"ms")}}const S=new ye;typeof window<"u"&&(window.mockPaymentService=S,console.log("MockPaymentService available in console for testing"));const Te=({isOpen:n,onClose:e,onSuccess:t,currentBalance:o})=>{const[a,l]=b.useState(""),[c,p]=b.useState(""),[f,T]=b.useState(!1),[_,y]=b.useState("validating"),[w,m]=b.useState(""),D=S.getPresetAmounts(),R=S.getAvailablePaymentMethods(),H=s=>{l(s.toString()),m("")},$=s=>{switch(s){case"validating":return"Validating payment details...";case"processing_payment":return"Processing payment...";case"updating_wallet":return"Updating wallet balance...";case"completed":return"Top-up completed successfully!";case"error":return"An error occurred";default:return"Processing..."}},L=s=>!s||s<=0?"Please enter a valid amount":s<10?"Minimum top-up amount is P10.00":s>5e4?"Maximum top-up amount is P50,000.00":null,z=async()=>{const s=parseFloat(a);console.log("TopUpModal: Starting top-up process",{topUpAmount:s,paymentMethod:c,currentBalance:o}),m(""),T(!0),y("validating");try{const g=L(s);if(g){m(g),i.error(g);return}if(!c){const d="Please select a payment method";m(d),i.error(d);return}console.log("TopUpModal: Getting current user...");const{data:{user:h},error:k}=await u.auth.getUser();if(k){console.error("TopUpModal: Supabase auth error:",k);const d="Authentication error. Please log in and try again.";m(d),i.error(d);return}if(!h){console.error("TopUpModal: No user found in session");const d="No user session found. Please log in and try again.";m(d),i.error(d);return}console.log("TopUpModal: User authenticated successfully:",h.id),y("processing_payment"),console.log("TopUpModal: Processing mock payment...");const v=await S.processPayment({amount:s,payment_method:c});if(console.log("TopUpModal: Payment result:",v),!v.success){const d=v.error_message||"Payment failed";m(d),i.error(d),y("error");return}if(y("updating_wallet"),console.log("TopUpModal: Adding funds to wallet for user:",h.id),await A.topUpWallet(h.id,{amount:s,payment_method:c,payment_reference:v.payment_reference}))y("completed"),console.log("TopUpModal: Top-up successful, calling onSuccess"),setTimeout(()=>{t(),j()},1500);else{const d="Failed to update wallet balance. Please contact support.";m(d),i.error(d),y("error")}}catch(g){console.error("TopUpModal: Unexpected error:",g);const h=g instanceof Error?g.message:"An unexpected error occurred. Please try again.";m(h),i.error(h),y("error")}finally{_!=="completed"&&T(!1)}},j=()=>{f||(e(),l(""),p(""),m(""),y("validating"))},J=o+(parseFloat(a)||0);return r.jsx(K,{open:n,onOpenChange:j,children:r.jsxs(Q,{className:"sm:max-w-md",children:[r.jsx(X,{children:r.jsxs(Z,{className:"flex items-center gap-2",children:[r.jsx(se,{className:"h-5 w-5"}),"Top Up Wallet"]})}),r.jsxs("div",{className:"space-y-4",children:[r.jsx("div",{className:"p-3 bg-muted rounded-lg",children:r.jsxs("div",{className:"flex items-center justify-between",children:[r.jsxs("div",{children:[r.jsx("p",{className:"text-sm text-muted-foreground",children:"Current Balance"}),r.jsxs("p",{className:"text-lg font-semibold",children:["P",o.toFixed(2)]})]}),a&&!w&&r.jsxs("div",{className:"text-right",children:[r.jsx("p",{className:"text-sm text-muted-foreground",children:"New Balance"}),r.jsxs("p",{className:"text-lg font-semibold text-green-600",children:["P",J.toFixed(2)]})]})]})}),w&&r.jsxs(F,{variant:"destructive",children:[r.jsx(le,{className:"h-4 w-4"}),r.jsx(B,{children:w})]}),f&&r.jsx(F,{children:r.jsxs("div",{className:"flex items-center gap-2",children:[_==="completed"?r.jsx(ie,{className:"h-4 w-4 text-green-500"}):r.jsx(E,{className:"h-4 w-4 animate-spin"}),r.jsx(B,{children:$(_)})]})}),r.jsxs("div",{className:"space-y-2",children:[r.jsx(N,{htmlFor:"amount",children:"Amount to Add (BWP)"}),r.jsx(q,{id:"amount",type:"number",placeholder:"0.00",value:a,onChange:s=>{l(s.target.value),m("")},min:"10",max:"50000",step:"0.01",disabled:f,className:w&&w.includes("amount")?"border-red-500":""}),r.jsx("p",{className:"text-xs text-muted-foreground",children:"Min: P10.00 • Max: P50,000.00"})]}),r.jsxs("div",{className:"space-y-2",children:[r.jsx(N,{children:"Quick Select (BWP)"}),r.jsx("div",{className:"grid grid-cols-3 gap-2",children:D.map(s=>r.jsxs(U,{variant:a===s.toString()?"default":"outline",size:"sm",onClick:()=>H(s),className:"h-8",disabled:f,children:["P",s]},s))})]}),r.jsxs("div",{className:"space-y-2",children:[r.jsx(N,{htmlFor:"payment-method",children:"Payment Method"}),r.jsxs(I,{value:c,onValueChange:s=>{p(s),m("")},disabled:f,children:[r.jsx(ee,{className:w&&w.includes("payment")?"border-red-500":"",children:r.jsx(te,{placeholder:"Select payment method"})}),r.jsx(ae,{children:R.map(s=>r.jsx(re,{value:s,children:s.replace(/_/g," ").replace(/\b\w/g,g=>g.toUpperCase())},s))})]})]}),r.jsx(oe,{className:"border-dashed border-2 border-muted",children:r.jsx(ne,{className:"p-3",children:r.jsxs("div",{className:"flex items-center gap-2",children:[r.jsx(ce,{className:"h-4 w-4 text-muted-foreground"}),r.jsx("p",{className:"text-xs text-muted-foreground",children:"🔒 This is a mock payment system for demo purposes. No real money will be charged."})]})})}),r.jsxs("div",{className:"flex gap-2",children:[r.jsx(U,{variant:"outline",onClick:j,className:"flex-1",disabled:f,children:"Cancel"}),r.jsx(U,{onClick:z,disabled:f||!a||!c||_==="completed",className:"flex-1",children:f?r.jsxs("div",{className:"flex items-center gap-2",children:[r.jsx(E,{className:"h-4 w-4 animate-spin"}),_==="completed"?"Success!":"Processing..."]}):`Top Up P${a||"0.00"}`})]})]})]})})};export{Te as T,A as w};
